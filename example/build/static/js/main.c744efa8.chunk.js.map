{"version":3,"sources":["../../lib/key-enum.ts","../../lib/index.tsx","App.tsx","index.tsx"],"names":["KeyEnum","React","forwardRef","props","ref","value","dataSource","className","_props$navigate","navigate","_props$caseSensitive","caseSensitive","onBlur","onFocus","onChange","onPressEnter","onSelect","others","_objectWithoutPropertiesLoose","_excluded","_useState","useState","innerVal","setInnerVal","_useState2","matchedDataSource","setMatchedDataSource","_useState3","activeIndex","setActiveIndex","ctrlValue","inputRef","useRef","useImperativeHandle","current","updateValue","updateMatchedDataSource","filter","_ref","text","startsWith","ignoreCase","equals","wrapClassString","classNames","styles","inputClassString","completeClassString","completeContent","_matchedDataSource$ac","slice","length","undefined","breakUp","createElement","Object","assign","type","e","target","onKeyDown","values","includes","key","preventDefault","TAB","matchedDataSourceItem","ENTER","ARROW_UP","idx","ARROW_DOWN","map","i","color","Math","random","toString","App","_slicedToArray","timelineList","setTimelineList","createRef","addTimelineItem","item","prevList","concat","Tag","InlineAutocomplete","event","Button","size","onClick","focus","Timeline","Item","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c744efa8.chunk.js","sourcesContent":["export enum KeyEnum {\r\n  TAB = 'Tab',\r\n  ENTER = 'Enter',\r\n  ARROW_UP = 'ArrowUp',\r\n  ARROW_DOWN = 'ArrowDown',\r\n}\r\n","import React, { useRef, useState } from 'react';\r\nimport classNames from 'classnames';\r\nimport ignoreCase from 'ignore-case';\r\nimport { KeyEnum } from './key-enum';\r\nimport styles from './index.module.css';\r\n\r\nexport interface Props {\r\n  value?: string;\r\n  dataSource: DataSourceItem[];\r\n  className?: string;\r\n  style?: React.CSSProperties;\r\n  placeholder?: string;\r\n  disabled?: boolean;\r\n  navigate?: boolean;\r\n  caseSensitive?: boolean;\r\n  onBlur?: () => void;\r\n  onFocus?: () => void;\r\n  onChange?: (value: string) => void;\r\n  onPressEnter?: (value: string) => void;\r\n  onSelect?: (item: DataSourceItem) => void;\r\n}\r\n\r\nexport interface DataSourceItem {\r\n  text: string;\r\n  value: string | number;\r\n  [key: string]: any;\r\n}\r\n\r\nconst Autocomplete: React.ForwardRefRenderFunction<HTMLInputElement, Props> = (props, ref) => {\r\n  const {\r\n    value,\r\n    dataSource,\r\n    className,\r\n    navigate = true,\r\n    caseSensitive = true,\r\n    onBlur,\r\n    onFocus,\r\n    onChange,\r\n    onPressEnter,\r\n    onSelect,\r\n    ...others\r\n  } = props;\r\n  const [innerVal, setInnerVal] = useState('');\r\n  const [matchedDataSource, setMatchedDataSource] = useState<DataSourceItem[]>();\r\n  const [activeIndex, setActiveIndex] = useState(0);\r\n  const ctrlValue = value ?? innerVal;\r\n\r\n  /**\r\n   * inputRef\r\n   */\r\n  const inputRef = useRef<HTMLInputElement>();\r\n  React.useImperativeHandle(ref, () => inputRef.current!);\r\n\r\n  const updateValue = (value: string) => {\r\n    onChange && onChange(value);\r\n    setInnerVal(value);\r\n  };\r\n\r\n  const updateMatchedDataSource = (value?: string) => {\r\n    setActiveIndex(0);\r\n    value\r\n      ? setMatchedDataSource(\r\n          dataSource.filter(({ text }) => {\r\n            return caseSensitive\r\n              ? text.startsWith(value) && text !== value\r\n              : ignoreCase.startsWith(text, value) && !ignoreCase.equals(text, value);\r\n          })\r\n        )\r\n      : setMatchedDataSource([]);\r\n  };\r\n\r\n  /**\r\n   * InputChange Handler\r\n   * @param e\r\n   */\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const value = e.target.value;\r\n    updateValue(value);\r\n    updateMatchedDataSource(value);\r\n  };\r\n\r\n  /**\r\n   * KeyDown Handler\r\n   * deal with `Tab` | `Enter` | `ArrowUp` | `ArrowDown`\r\n   * @param e\r\n   */\r\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (Object.values(KeyEnum).includes(e.key as KeyEnum)) {\r\n      e.preventDefault();\r\n    }\r\n\r\n    switch (e.key) {\r\n      case KeyEnum.TAB:\r\n        const matchedDataSourceItem = matchedDataSource?.[activeIndex];\r\n        if (!matchedDataSourceItem) return;\r\n\r\n        /**\r\n         * onChange >>> onSelect >>> Search matched item\r\n         */\r\n        const { text } = matchedDataSourceItem;\r\n        updateValue(text);\r\n        onSelect && onSelect(matchedDataSourceItem);\r\n        updateMatchedDataSource(text);\r\n        break;\r\n      case KeyEnum.ENTER:\r\n        /**\r\n         * onPressEnter >>> Reset\r\n         */\r\n        onPressEnter && onPressEnter(ctrlValue);\r\n        updateMatchedDataSource();\r\n        break;\r\n      case KeyEnum.ARROW_UP:\r\n        if (!navigate) break;\r\n\r\n        setActiveIndex((idx) => {\r\n          if (matchedDataSource?.length) {\r\n            return (idx - 1 + matchedDataSource.length) % matchedDataSource.length;\r\n          }\r\n          return 0;\r\n        });\r\n        break;\r\n      case KeyEnum.ARROW_DOWN:\r\n        if (!navigate) break;\r\n\r\n        setActiveIndex((idx) => {\r\n          if (matchedDataSource?.length) {\r\n            return (idx + 1) % matchedDataSource.length;\r\n          }\r\n          return 0;\r\n        });\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const breakUp = () => {\r\n    return matchedDataSource?.[activeIndex]?.text\r\n      ? `${ctrlValue}${matchedDataSource[activeIndex].text.slice(ctrlValue.length)}`\r\n      : undefined;\r\n  };\r\n\r\n  const wrapClassString = classNames('ria-wrap', styles.wrap, className); // `className` should cover `styles.wrap`\r\n  const inputClassString = classNames('ria-input', styles.input);\r\n  const completeClassString = classNames('ria-complete', styles.complete);\r\n  const completeContent = breakUp();\r\n\r\n  return (\r\n    <div className={wrapClassString}>\r\n      <input\r\n        ref={inputRef as any}\r\n        className={inputClassString}\r\n        value={ctrlValue}\r\n        type=\"text\"\r\n        onBlur={onBlur}\r\n        onFocus={onFocus}\r\n        onChange={handleChange}\r\n        onKeyDown={handleKeyDown}\r\n        {...others}\r\n      />\r\n      <div className={completeClassString}>{completeContent}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst RefAutoComplete = React.forwardRef<HTMLInputElement, Props>(Autocomplete);\r\nexport default RefAutoComplete;\r\n","import React, { useState } from 'react';\r\nimport { Button, Tag, Timeline } from 'antd';\r\nimport InlineAutocomplete from 'react-inline-autocomplete';\r\nimport { DataSourceItem } from 'react-inline-autocomplete/dist';\r\nimport 'react-inline-autocomplete/dist/index.css';\r\nimport './App.scss';\r\n\r\nconst dataSource: DataSourceItem[] = [\r\n  {\r\n    text: 'Amazon',\r\n    value: 'Amazon',\r\n  },\r\n  {\r\n    text: 'Google',\r\n    value: 'Google',\r\n  },\r\n  {\r\n    text: 'Google Search',\r\n    value: 'GoogleSearch',\r\n  },\r\n  {\r\n    text: 'Apple',\r\n    value: 'Apple',\r\n  },\r\n  {\r\n    text: 'Apple Pencil',\r\n    value: 'ApplePencil',\r\n  },\r\n  {\r\n    text: 'Apple Watch',\r\n    value: 'AppleWatch',\r\n  },\r\n  {\r\n    text: 'Apple Power',\r\n    value: 'ApplePower',\r\n  },\r\n].map((i) =>\r\n  Object.assign(i, {\r\n    color: '#' + ((Math.random() * 0xffffff) << 0).toString(16),\r\n  })\r\n);\r\n\r\nfunction App() {\r\n  const [timelineList, setTimelineList] = useState<\r\n    {\r\n      value: string;\r\n      event: string;\r\n    }[]\r\n  >([]);\r\n  const ref = React.createRef<HTMLInputElement>();\r\n\r\n  const focus = () => {\r\n    ref.current!.focus();\r\n  };\r\n\r\n  const addTimelineItem = (item: { value: string; event: string }) => {\r\n    setTimelineList((prevList) => [item].concat(prevList));\r\n  };\r\n\r\n  const onChange = (value: string) => {\r\n    addTimelineItem({\r\n      value,\r\n      event: 'Change',\r\n    });\r\n  };\r\n\r\n  const onPressEnter = (value: string) => {\r\n    addTimelineItem({\r\n      value,\r\n      event: 'PressEnter',\r\n    });\r\n  };\r\n\r\n  const onSelect = (item: DataSourceItem) => {\r\n    addTimelineItem({\r\n      value: item.text,\r\n      event: 'Select',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <section>\r\n        {/* <b>Data Source:</b>&nbsp;&nbsp; */}\r\n        {dataSource.map((i, idx) => (\r\n          <Tag key={idx} color={i.color}>\r\n            {i.text}\r\n          </Tag>\r\n        ))}\r\n      </section>\r\n      <section>\r\n        <InlineAutocomplete\r\n          ref={ref}\r\n          className=\"inline-autocomplete-example\"\r\n          dataSource={dataSource}\r\n          caseSensitive={false}\r\n          onChange={onChange}\r\n          onSelect={onSelect}\r\n          onPressEnter={onPressEnter}\r\n        ></InlineAutocomplete>\r\n        <Button type=\"primary\" size=\"large\" onClick={focus}>\r\n          Focus\r\n        </Button>\r\n      </section>\r\n      <section>\r\n        <Timeline>\r\n          {timelineList.map((i, idx) => (\r\n            <Timeline.Item key={idx}>\r\n              <pre>\r\n                Event: {i.event}, {i.value}\r\n              </pre>\r\n            </Timeline.Item>\r\n          ))}\r\n        </Timeline>\r\n      </section>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}